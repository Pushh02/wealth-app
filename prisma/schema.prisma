// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Primary
  Approver
}

model User {
  id          String  @id @default(uuid())
  name        String
  email       String  @unique
  password    String

  accounts Account[]
  approverAccounts Account[] @relation("AccountApprovers")

  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model Account {
  id String @id @default(uuid())
  name String
  institution String
  
  userId String
  user User @relation(fields: [userId], references: [id])
  
  approvers User[] @relation("AccountApprovers")
  
  bankAccount BankAccount?
  rules Rules[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BankAccount {
  id String @id @default(uuid())
  name String
  institution String

  balance Float?
  lastFour String?
  accessToken String? @unique
  itemId String? @unique
  
  accountId String @unique
  account   Account   @relation(fields: [accountId], references: [id])

  alertTransactions AlertTransactions[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rules {
  id String @id @default(uuid())
  name String
  threshold Float
  transactionType String?

  accountId String
  account   Account   @relation(fields: [accountId], references: [id])

  isActive Boolean @default(false)
  description String

  alertTransactions AlertTransactions[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AlertTransactions {
  id String @id @default(uuid())
  name String @default("Test Transaction")
  amount Float
  transactionType String
  category String
  transactionId String

  bankAccountId String
  bankAccount   BankAccount   @relation(fields: [bankAccountId], references: [id])

  violatedRuleId String?
  violatedRule Rules? @relation(fields: [violatedRuleId], references: [id])

  approvedBy String[]
  isApproved Boolean @default(false)

  rejectedBy String[]
  isRejected Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
